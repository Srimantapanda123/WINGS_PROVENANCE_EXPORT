package Validations;

import java.util.ArrayList;

import org.apache.jena.ontology.OntModel;
public class Validator{
public static String validateRepo(OntModel m){
    String result = "##########REPORT##########\n";        
    int n=0;
    //execution artifacts
    //result+="#TEST"+(++n)+": ALL EXECUTION ARTIFACTS SHOULD BELONG TO AN ACCOUNT.\n";
    //result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_ARTIFACTS_WITHOUT_ACCOUNT, m, "countArt")))+"\n";
//    result+="#TEST"+(++n)+": ALL EXECUTION ARTIFACTS SHOULD HAVE A LOCATION (VARIABLES) OR VALUE (PARAMETERS)..\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_ARTIFACTS_WITHOUT_LOCATION_OR_VALUE, m, "countArt")))+"\n";
//    result+="#TEST"+(++n)+": ALL EXECUTION ARTIFACTS SHOULD BELONG TO A TEMPLATE VARIABLE OR PARAMETER THAT BELONGS TO A TEMPLATE.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_ARTIFACTS_WITHOUT_BINDING_TO_TEMPLATE_ARTIFACT, m, "countArt")))+"\n";
//    result+="#TEST"+(++n)+": ALL EXECUTION ARTIFACTS SHOULD BE USED OR GENERATED BY A PROCESS.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_ARTIFACTS_WITHOUT_BINDING_TO_PROCESS, m, "countArt")))+"\n";
//    //execution processes
//    result+="#TEST"+(++n)+": ALL PROCESSES SHOULD BELONG TO AN ACCOUNT.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_PROCESSES_WITHOUT_ACCOUNT, m, "countProc")))+"\n";
//    result+="#TEST"+(++n)+": ALL PROCESSES SHOULD USE OR GENERATE SOME ARTIFACT.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_PROCESSES_NOT_BOUND_TO_ARTIFACT, m, "countProc")))+"\n";
//    result+="#TEST"+(++n)+": ALL PROCESSES SHOULD HAVE AN EXECUTION CODE ASSOCIATED TO THEM.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_PROCESSES_WITHOUT_CODE, m, "countProc")))+"\n";
//    result+="#TEST"+(++n)+": ALL PROCESSES SHOULD CORRESPOND TO A PROCESS THAT BELONGS TO A TEMPLATE.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_PROCESSES_WITHOUT_CORRECT_TEMPLATE_BINDING, m, "countProc")))+"\n";
//    //execution accounts
//    result+="#TEST"+(++n)+": ALL EXECUTIONS MUST BELONG TO A TEMPLATE.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_EXECUTIONS_WITHOUT_TEMPLATE, m, "countAcc")))+"\n";
//    result+="#TEST"+(++n)+": ALL EXECUTIONS MUST HAVE AN END TIME, A START TIME AND A STATUS.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_EXECUTIONS_WITHOUT_TIME_OR_STATUS, m, "countAcc")))+"\n";
//    result+="#TEST"+(++n)+": (OPTIONAL TEST) AN ACCOUNT MAY HAVE A POINTER TO THE ORIGINAL LOG FILE.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_EXECUTIONS_WITHOUT_LOG_FILE, m, "countAcc")))+"\n";
//    //template artifacts
//    result+="#TEST"+(++n)+": ALL TEMPLATE ARTIFCATS MUST BELONG TO A TEMPLATE.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_TEMPL_ARTIFACTS_WITHOUT_TEMPLATE, m, "countArt")))+"\n";
//    result+="#TEST"+(++n)+": ALL TEMPLATE ARTIFACTS MUST BE CONNECTED TO A TEMPLATE PROCESS (testing in  OPMW).\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_TEMPL_ARTIFACTS_WITHOUT_PROCESS_OPMW, m, "countArt")))+"\n";
//    result+="#TEST"+(++n)+": ALL TEMPLATE ARTIFACTS MUST BE CONNECTED TO A TEMPLATE PROCESS (testing in P-PLAN).\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_TEMPL_ARTIFACTS_WITHOUT_PROCESS_P_PLAN, m, "countArt")))+"\n";
//    //template processes
//    result+="#TEST"+(++n)+": ALL TEMPLATE PROCESSES MUST BELONG TO A TEMPLATE (test in OPMW).\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_TEMPL_PROCESSES_WITHOUT_TEMPLATE_OPMW, m, "countProc")))+"\n";
//    result+="#TEST"+(++n)+": ALL TEMPLATE PROCESSES MUST BELONG TO A TEMPLATE (test in PPlan).\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_TEMPL_PROCESSES_WITHOUT_TEMPLATE_PPLAN, m, "countProc")))+"\n";
////    ResultSetFormatter.out(System.out,Utils.queryLocalRepository(Queries.SELECT_TEMPL_PROCESSES_WITHOUT_TEMPLATE_PPLAN, m));
//    result+="#TEST"+(++n)+": ARE THERE ANY UNDECLARED WORKFLOW TEMPLATE PROCESSES?.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_UNDECLARED_PROCESSES, m, "countProc")))+"\n";
//    result+="#TEST"+(++n)+": ALL TEMPLATE PROCESSES MUST USE OR GENERATE A TEMPLATE ARTIFACT (test in OPMW).\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_TEMPL_PROCESS_WITHOUT_BINDING_TO_ARTIFACT_OPMW, m, "countProc")))+"\n";
//    result+="#TEST"+(++n)+": ALL TEMPLATE PROCESSES MUST USE OR GENERATE A TEMPLATE ARTIFACT (test in P-PLAN).\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_TEMPL_PROCESS_WITHOUT_BINDING_TO_ARTIFACT_PPLAN, m, "countProc")))+"\n";
//    
//    //templates
//    result+="#TEST"+(++n)+": (OPTIONAL TEST) TEMPLATES SHOULD HAVE A VERSION NUMBER.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_TEMPL_WITHOUT_VERSION_NUMBER, m, "countT")))+"\n";
//    result+="#TEST"+(++n)+": (OPTIONAL TEST) TEMPLATES SHOULD HAVE A POINTER TO THE NATIVE SYSTEM TEMPLATE.\n";
//    result+="\t"+isTestFailed(Integer.parseInt(Utils.getCountOf(Queries.COUNT_TEMPL_WITHOUT_NATIVE_SYS_TEMPL, m, "countT")))+"\n";
    
    
    
    //TEST 1: HOW MANY EXECUTIONS DOES THE TEMPLATE HAVE?
      result+="#TEST"+(++n)+":HOW MANY EXECUTIONS DOES THE TEMPLATE HAVE?\n";
      ArrayList<Integer> arr1=new ArrayList<>();
      
      arr1=Utils.queryresult(Queries.HOW_MANY_EXECUTIONS_DOES_THE_TEMPLATE_HAVE, m, "t","acc");
      result+="The number of executions are: "+arr1.get(1)+" and the number of templates are "+arr1.get(0)+"\n";
      
      result+="\n\n";
      
    //TEST 2: HOW MANY EXPANDED TEMPALTES DOES THE TEMPLATE HAVE? 
      result+="#TEST"+(++n)+":HOW MANY EXPANDED TEMPALTES DOES THE TEMPLATE HAVE?\n";
      ArrayList<Integer> arr2=new ArrayList<>();
      
      arr2=Utils.queryresult(Queries.HOW_MANY_EXPANDED_TEMPLATES_DOES_THE_TEMPLATE_HAVE, m, "t","et");
      result+="The number of templates are: "+arr2.get(0)+" and the number of expanded templates are "+arr2.get(1)+"\n";
      
      result+="\n\n";
      
      //TEST 3: HOW MANY EXECUTIONS DOES THE EXPANDED TEMPLATE HAVE? 
        result+="#TEST"+(++n)+":HOW MANY EXECUTIONS DOES THE EXPANDED TEMPLATE HAVE?\n";
        ArrayList<Integer> arr3=new ArrayList<>();
        
        arr3=Utils.queryresult(Queries.HOW_MANY_EXECUTIONS_DOES_THE_EXPANDED_TEMPLATES_HAVE, m, "et","acc");
        result+="The number of executions are: "+arr3.get(1)+" and the number of expanded templates are "+arr3.get(0)+"\n";
      
        result+="\n\n";
    	
   
    return result;
}

private static String isTestFailed(int problems){
    if(problems<=0){
        return "--->OK!";
    }else return "--->FAILED!! Number of problems found: "+ problems;
}
}